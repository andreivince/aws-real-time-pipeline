import "dotenv/config";
import axios from "axios";
import https from "https"; 

const INGEST_ENDPOINT = process.env.INGEST_ENDPOINT;
if (!INGEST_ENDPOINT) {
  throw new Error("INGEST_ENDPOINT environment variable not set");
}
const ENDPOINT: string = INGEST_ENDPOINT; // Type assertion for TypeScript


const agent = new https.Agent({ // This creates a agent that holds alive the connections
  keepAlive: true,
  maxSockets: 1200, 
  maxFreeSockets: 300, 
});


const SYMBOLS = [
  "AAPL",
  "GOOGL",
  "AMZN",
  "META",
  "MSFT",
  "TSLA",
  "NFLX",
  "NVDA",
  "BRK.A",
  "V",
  "JPM",
  "WMT",
  "DIS",
  "PYPL",
  "ADBE",
  "INTC",
  "CSCO",
  "CMCSA",
  "PEP",
  "KO",
  "PFE",
  "MRK",
  "ABT",
  "NKE",
  "VZ",
  "T",
  "XOM",
  "CVX",
  "UNH",
  "JNJ",
  "HD",
  "PG",
  "LLY",
  "CRM",
  "ORCL",
  "IBM",
  "TMO",
  "MDT",
  "BMY",
  "AMGN",
  "QCOM",
  "TXN",
  "AVGO",
  "INTU",
  "NOW",
  "ZM",
  "SQ",
  "SHOP",
  "SPOT",
  "TWTR",
  "SNAP",
  "UBER",
  "LYFT",
  "LYFT",
  "PINS",
  "DOCU",
  "ZM",
  "ROKU",
  "FSLY",
  "ETSY",
  "CRWD",
  "DDOG",
  "OKTA",
  "Z",
  "PSTG",
  "PLTR",
  "RBLX",
  "COIN",
  "MSTR",
  "SQSP",
  "FVRR",
  "UPWK",
  "LYFT",
  "RNG",
  "ZEND",
  "ZEN",
  "TEAM",
  "WORK",
  "ATVI",
  "EA",
  "TTWO",
  "UBSF",
  "SNOW",
  "MDB",
  "DBX",
  "BOX",
  "PCTY",
  "PAYC",
  "FICO",
  "VEEV",
  "ZSAN",
  "CRWD",
  "SPLK",
  "S",
  "FSLY",
  "CDNS",
  "SNPS",
  "ANSS",
  "TTD",
  "RBLX",
  "PUBM",
  "SE",
  "BILI",
  "IQ",
  "HUYA",
  "TME",
  "YY",
  "BIDU",
  "JD",
  "PDD",
  "NTES",
  "TAL",
  "EDU",
  "DADA",
  "ZTO",
  "YUMC",
  "BA",
  "BAC",
  "C",
  "GS",
  "MS",
  "WFC",
  "BK",
  "BLK",
  "AXP",
  "COF",
  "DFS",
  "USB",
  "PNC",
  "TFC",
  "CME",
  "ICE",
  "SCHW",
  "AMP",
  "AIG",
  "PRU",
  "MET",
  "ALL",
  "TRV",
  "CB",
  "MMC",
  "AON",
  "AJG",
  "PGR",
  "HIG",
  "L",
  "LNC",
  "UNM",
  "GL",
  "CINF",
  "WRB",
  "RJF",
  "STT",
  "NTRS",
  "BEN",
  "IVZ",
  "AMP",
  "TROW",
  "FRC",
  "MTB",
  "FITB",
  "KEY",
  "RF",
  "HBAN",
  "CMA",
  "ZION",
  "CFG",
  "CFR",
  "SIVB",
  "FHN",
  "PB",
  "BOKF",
  "SNV",
  "PNFP",
  "HWC",
  "TCBI",
  "CUBI",
  "EWBC",
  "FNB",
  "ONB",
  "CIT",
  "UBSI",
  "WSBC",
  "WTFC",
  "BXS",
  "GBCI",
  "FULT",
  "AMTB",
  "FBK",
  "CASH",
  "SFBS",
  "BANF",
  "TRMK",
  "FMBI",
  "INDB",
  "TCBK",
  "SASR",
  "LBAI",
  "HTLF",
  "NBHC",
  "CIVB",
  "FFIC",
  "MBIN",
  "PFBC",
  "CUBI",
  "CFFN",
  "CFR",
  "CASS",
  "BOH",
  "BHLB",
  "BMTC",
  "BOKF",
  "BPFH",
  "BRKL",
  "BUSE",
  "BY",
  "CASH",
  "CATC",
  "CBU",
  "CCNE",
  "CHCO",
];

function getRandomPrice(): number {
  return +(Math.random() * 1000 + 100).toFixed(2);
}

async function sendTick() {
  const symbol = SYMBOLS[Math.floor(Math.random() * SYMBOLS.length)];
  const price = getRandomPrice();
  const timestamp = Date.now();

  const payload = { symbol, price, timestamp };

  try {
    await axios.post(ENDPOINT, payload, {
      httpsAgent: agent});
  } catch (error) {
    console.error("Failed to send tick:", error);
  }
}

setInterval(async () => {
  const promises: Promise<void>[] = [];
  for (let i = 0; i < 500; i++) {
    promises.push(sendTick());
  }
  await Promise.all(promises);
  console.log(`Sent 500 ticks`);
}, 1000); 
